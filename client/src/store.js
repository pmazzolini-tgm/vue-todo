import Vue from 'vue';
import Vuex from 'vuex';
import api from './api';

Vue.use(Vuex);

export default new Vuex.Store({
  strict: true,
  state: {
    todoLists: {},
    todos: {},
  },
  mutations: {
    setTodoLists(state, { todoLists }) {
      state.todoLists = todoLists;
    },
    setTodoList(state, { todoList }) {
      Vue.set(state.todoLists, todoList.id, todoList);
    },
    createTodoList(state, { name }) {
      // TODO: Use ID generated by server
      const nextId =
        Object.values(state.todoLists).reduce((prev, cur) => (prev.id > cur.id ? prev : cur)).id +
        1;
      Vue.set(state.todoLists, nextId, {
        id: nextId,
        name,
        todos: [],
      });
    },
    deleteTodoList(state, { id }) {
      Vue.delete(state.todoLists, id);
    },
    setTodo(state, { todo }) {
      state.todos[todo.id] = todo;
    },
    createTodo(state, { todoListId, title }) {
      const todoList = state.todoLists[todoListId];
      // TODO: Use ID generated by server
      const nextId =
        Object.values(state.todos).reduce((prev, cur) => (prev.id > cur.id ? prev : cur)).id + 1;
      state.todos[nextId] = {
        id: nextId,
        title,
        completed: false,
      };
      todoList.todos.push(nextId);
    },
    toggleTodo(state, { id }) {
      state.todos[id].completed = !state.todos[id].completed;
    },
    updateTodo(state, { id, title }) {
      state.todos[id].title = title;
    },
    deleteTodo(state, { todoListId, id }) {
      state.todoLists[todoListId].todos =
        state.todoLists[todoListId].todos.filter(todoId => todoId !== id);
    },
    deleteCompletedTodos(state, { todoListId }) {
      const todoList = state.todoLists[todoListId];
      const todos = todoList.todos.map(todoId => state.todos[todoId]);
      todoList.todos = todos.filter(todo => !todo.completed).map(todo => todo.id);
    },
  },
  actions: {
    async loadTodoLists({ commit }) {
      const todoLists = await api.getTodoLists();
      commit('setTodoLists', { todoLists });
    },
    async loadTodoList({ commit }, { id }) {
      const todoList = await api.getTodoList(id);
      const todos = await Promise.all(todoList.todos.map(todoId => api.getTodo(todoId)));
      todos.forEach(todo => commit('setTodo', { todo }));
      commit('setTodoList', { todoList });
    },
  },
});
